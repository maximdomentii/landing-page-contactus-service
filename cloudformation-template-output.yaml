AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: Serverless contact form on the AWS Cloud.
Parameters:
  ToEmailAddress:
    Type: String
    Description: Email address you want contact form submittions to go to
  ContactUsEmailTemplateName:
    Type: String
    Description: Name of the SES email tamplate
    Default: contact-us-email-template
  username:
    Type: String
    Description: Username of the Lambda autorizer function
  password:
    Type: String
    Description: Password of the Lambda autorizer function
Resources:
  LambdaFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
            - apigateway.amazonaws.com
          Action: sts:AssumeRole
      ManagedPolicyArns:
      - arn:aws:iam::319977881563:policy/service-role/AWSLambdaBasicExecutionRole-aeabd6f2-086b-42ec-84af-6b54e6efe8a8
      Path: /
      Policies:
      - PolicyName: lambda
        PolicyDocument:
          Statement:
            Effect: Allow
            Action:
            - lambda:InvokeFunction
            Resource: '*'
      - PolicyName: sendEmails
        PolicyDocument:
          Statement:
            Effect: Allow
            Action:
            - ses:SendEmail
            - ses:SendTemplatedEmail
            - ses:SendRawEmail
            Resource: '*'
  LambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: mailfwd
      Runtime: nodejs14.x
      Timeout: 5
      Handler: index.handler
      Role:
        Fn::GetAtt:
        - LambdaFunctionRole
        - Arn
      Environment:
        Variables:
          ToEmailAddress:
            Ref: ToEmailAddress
          AwsRegion:
            Ref: AWS::Region
          EmailTemplate:
            Ref: ContactUsEmailTemplateName
      Code:
        ZipFile: "// Load the AWS SDK for Node.js\nconst aws = require('aws-sdk');\n\
          \n// Create a new SES object in eu-central-1 region\nconst ses = new aws.SES({region:\
          \ process.env.AwsRegion});\n  \nconst RECEIVER = process.env.ToEmailAddress;\n\
          const SENDER = process.env.ToEmailAddress;\n  \nexports.handler = (event,\
          \ context, callback) => {\n  \n  const params = {\n    Destination: {\n\
          \      ToAddresses: [\n        RECEIVER\n      ]\n    },\n    Template:\
          \ process.env.EmailTemplate,\n    TemplateData: JSON.stringify({\n     \
          \ \"name\": event.name,\n      \"text\": event.desc,\n      \"phone\": event.phone,\n\
          \      \"email\": event.email\n    }),\n    Source: SENDER\n  };\n  \n \
          \ let responseStatusCode = 200;\n  let responseResult = \"Success\";\n \
          \ ses.sendTemplatedEmail(params, (err, data) => {\n    if (err) {\n    \
          \  console.log('Email failed:', err);\n      callback(null, {\n        \"\
          statusCode\": 500,\n        \"status\": \"Failed\"\n      });\n    } else\
          \ {\n      console.log('Email sent:', data);\n      callback(null, {\n \
          \       \"statusCode\": 200,\n        \"status\": \"Success\"\n      });\n\
          \    }\n  });\n};\n"
  LambdaAuthorizerFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: mailfwd-api-authorizer
      Runtime: nodejs14.x
      Timeout: 5
      Handler: index.handler
      Role:
        Fn::GetAtt:
        - LambdaFunctionRole
        - Arn
      Environment:
        Variables:
          username:
            Ref: username
          password:
            Ref: password
      Code:
        ZipFile: "const USERNAME = process.env.username;\nconst PASSWORD = process.env.password;\n\
          \nexports.handler = (event, context, callback) => {\n  const authorizationHeader\
          \ = event.headers.Authorization;\n\n  if (!authorizationHeader) {\n    return\
          \ callback('Unauthorized');\n  }\n\n  const encodedCreds = authorizationHeader.split('\
          \ ')[1];\n  const plainCreds = (new Buffer(encodedCreds, 'base64')).toString().split(':');\n\
          \  const username = plainCreds[0];\n  const password = plainCreds[1];\n\n\
          \  if (!(username === USERNAME && password === PASSWORD)) {\n    return\
          \ callback('Unauthorized');\n  }\n\n  const authResponse = buildAllowAllPolicy(event,\
          \ username);\n\n  callback(null, authResponse);\n};\n\nconst buildAllowAllPolicy\
          \ = (event, principalId) => {\n  const tmp = event.methodArn.split(':');\n\
          \  const apiGatewayArnTmp = tmp[5].split('/');\n  const awsAccountId = tmp[4];\n\
          \  const awsRegion = tmp[3];\n  const restApiId = apiGatewayArnTmp[0];\n\
          \  const stage = apiGatewayArnTmp[1];\n  const apiArn = 'arn:aws:execute-api:'\
          \ + awsRegion + ':' + awsAccountId + ':' + restApiId + '/' + stage + '/*/*';\n\
          \  const policy = {\n    principalId: principalId,\n    policyDocument:\
          \ {\n    Version: '2012-10-17',\n      Statement: [{\n        Action: 'execute-api:Invoke',\n\
          \        Effect: 'Allow',\n        Resource: [apiArn]\n      }]\n    }\n\
          };\n\nreturn policy;\n"
  lambdaApiGatewayInvoke:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName:
        Fn::GetAtt:
        - LambdaFunction
        - Arn
      Principal: apigateway.amazonaws.com
      SourceArn:
        Fn::Join:
        - ''
        - - 'arn:aws:execute-api:'
          - Ref: AWS::Region
          - ':'
          - Ref: AWS::AccountId
          - ':'
          - Ref: ApiGatewayRestApi
          - /*/*
  ApiGatewayRestApi:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name:
        Ref: LambdaFunction
      ApiKeySourceType: HEADER
      EndpointConfiguration:
        Types:
        - REGIONAL
  ApiGatewayResponse:
    Type: AWS::ApiGateway::GatewayResponse
    Properties:
      ResponseParameters:
        gatewayresponse.header.WWW-Authenticate: "'Basic'"
      ResponseType: UNAUTHORIZED
      RestApiId:
        Ref: ApiGatewayRestApi
      StatusCode: '401'
  ApiGatewayResource:
    Type: AWS::ApiGateway::Resource
    DependsOn: ApiGatewayRestApi
    Properties:
      RestApiId:
        Ref: ApiGatewayRestApi
      ParentId:
        Fn::GetAtt:
        - ApiGatewayRestApi
        - RootResourceId
      PathPart: contact-us
  ApiGatewayAuthorizer:
    Type: AWS::ApiGateway::Authorizer
    Properties:
      AuthorizerCredentials:
        Fn::GetAtt:
        - LambdaFunctionRole
        - Arn
      AuthorizerResultTtlInSeconds: '0'
      AuthorizerUri:
        Fn::Join:
        - ''
        - - 'arn:aws:apigateway:'
          - Ref: AWS::Region
          - :lambda:path/2015-03-31/functions/
          - Fn::GetAtt:
            - LambdaAuthorizerFunction
            - Arn
          - /invocations
      Type: TOKEN
      IdentitySource: method.request.header.Authentication
      Name: mailfwd-authorizer
      RestApiId:
        Ref: ApiGatewayRestApi
  ApiGatewayMethod2:
    Type: AWS::ApiGateway::Method
    DependsOn: ApiGatewayResource
    Properties:
      RestApiId:
        Ref: ApiGatewayRestApi
      ResourceId:
        Ref: ApiGatewayResource
      HttpMethod: POST
      AuthorizationType: CUSTOM
      AuthorizerId:
        Ref: ApiGatewayAuthorizer
      ApiKeyRequired: false
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS
        Uri:
          Fn::Sub:
          - arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${lambdaArn}/invocations
          - lambdaArn:
              Fn::GetAtt:
              - LambdaFunction
              - Arn
        IntegrationResponses:
        - StatusCode: '200'
      RequestParameters:
        method.request.header.Authorization: true
      MethodResponses:
      - ResponseModels:
          application/json: Empty
        ResponseParameters:
          method.response.header.Access-Control-Allow-Headers: false
          method.response.header.Access-Control-Allow-Methods: false
          method.response.header.Access-Control-Allow-Origin: false
        StatusCode: '200'
  ApiGatewayMethod:
    Type: AWS::ApiGateway::Method
    DependsOn: ApiGatewayMethod2
    Properties:
      RestApiId:
        Ref: ApiGatewayRestApi
      ResourceId:
        Ref: ApiGatewayResource
      HttpMethod: OPTIONS
      AuthorizationType: NONE
      ApiKeyRequired: false
      RequestParameters: {}
      MethodResponses:
      - ResponseModels:
          application/json: Empty
        ResponseParameters:
          method.response.header.Access-Control-Allow-Headers: false
          method.response.header.Access-Control-Allow-Methods: false
          method.response.header.Access-Control-Allow-Origin: false
        StatusCode: '200'
      Integration:
        CacheNamespace:
          Ref: ApiGatewayResource
        IntegrationResponses:
        - ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: "'*'"
            method.response.header.Access-Control-Allow-Methods: "'OPTIONS,POST'"
            method.response.header.Access-Control-Allow-Origin: "'*'"
          ResponseTemplates: {}
          SelectionPattern: ''
          StatusCode: '200'
        PassthroughBehavior: WHEN_NO_MATCH
        RequestTemplates:
          application/json: '{"statusCode": 200}'
        TimeoutInMillis: 29000
        Type: MOCK
  ApiGatewayDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn: ApiGatewayMethod
    Properties:
      RestApiId:
        Ref: ApiGatewayRestApi
  ApiGatewayStage:
    Type: AWS::ApiGateway::Stage
    DependsOn: ApiGatewayDeployment
    Properties:
      StageName: v1
      DeploymentId:
        Ref: ApiGatewayDeployment
      RestApiId:
        Ref: ApiGatewayRestApi
Outputs:
  APIGatewayURL:
    Value:
      Fn::Sub: https://${ApiGatewayRestApi}.execute-api.${AWS::Region}.amazonaws.com/${ApiGatewayStage}/contact-us
    Description: URL of the REST API.
  LambdaName:
    Value:
      Ref: LambdaFunction
    Description: Name of the Lambda function.
