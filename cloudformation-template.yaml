# AWS Serverless Contact Form - CloudFormation Template

# TODO:
# 1. SES template when issue https://github.com/aws-cloudformation/cloudformation-coverage-roadmap/issues/326 got resolved

AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: 'Serverless contact form on the AWS Cloud.'

Parameters:
  ToEmailAddress:
    Type: String
    Description: Email address you want contact form submittions to go to
  ContactUsEmailTemplateName:
    Type: String
    Description: Name of the SES email tamplate
    Default: 'contact-us-email-template'

Resources:

  LambdaFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action: "sts:AssumeRole"
      ManagedPolicyArns:
        - "arn:aws:iam::319977881563:policy/service-role/AWSLambdaBasicExecutionRole-aeabd6f2-086b-42ec-84af-6b54e6efe8a8"
      Path: /
      Policies:
        - PolicyName: lambda
          PolicyDocument:
            Statement:
              Effect: Allow
              Action:
                - "lambda:InvokeFunction"
              Resource: "*"
        - PolicyName: sendEmails
          PolicyDocument:
            Statement:
              Effect: Allow
              Action:
                - "ses:SendEmail"
                - "ses:SendTemplatedEmail"
                - "ses:SendRawEmail"
              Resource: "*"

#  SesTemplate:
#    Type: AWS::SES::Template
#    Properties:
#      Template:
#        TemplateName:
#          Ref: ContactUsEmailTemplateName
#        SubjectPart: 'maximdomentii.com contact us from {{name}}'
#        TextPart: '<h1>New message from {{name}}</h1><br/><p>{{text}}</p><br/><p>Contact details</p><p>Phone: {{phone}}</p><p>Email: {{email}}<p>'
#        HtmlPart: 'New message from {{name}}\n\n\n{{text}}\n\nContact details\nPhone: {{phone}}\nEmail: {{email}}'

  LambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: mailfwd
      Runtime: nodejs14.x
      Timeout: 5
      Handler: index.handler
      Role: !GetAtt LambdaFunctionRole.Arn
      Environment:
        Variables:
          ToEmailAddress:
            Ref: ToEmailAddress
          AwsRegion:
            Ref: 'AWS::Region'
          EmailTemplate:
            Ref: ContactUsEmailTemplateName
      Code:
        ZipFile: |
          // Load the AWS SDK for Node.js
          const aws = require('aws-sdk');
          
          // Create a new SES object in eu-central-1 region
          const ses = new aws.SES({region: process.env.AwsRegion});
            
          const RECEIVER = process.env.ToEmailAddress;
          const SENDER = process.env.ToEmailAddress;
            
          exports.handler = (event, context, callback) => {
            
            const params = {
              Destination: {
                ToAddresses: [
                  RECEIVER
                ]
              },
              Template: process.env.EmailTemplate,
              TemplateData: JSON.stringify({
                "name": event.name,
                "text": event.desc,
                "phone": event.phone,
                "email": event.email
              }),
              Source: SENDER
            };
            
            let responseStatusCode = 200;
            let responseResult = "Success";
            ses.sendTemplatedEmail(params, (err, data) => {
              callback(null, {err: err, data: data});
              if (err) {
                responseStatusCode = 500;
                responseResult = "Failed";
                console.log('Email failed:', err);
                context.fail(err);
              } else {
                console.log('Email sent:', data);
                context.succeed(event);
              }
            });
            
            const response = {
              "statusCode": responseStatusCode,
              "headers": {
                "Content-Type": "application/json", "Access-Control-Allow-Origin": "*"
              },
              "isBase64Encoded": false,
              "body": "{ \"result\": " + responseResult + "}"
            }
          
            return response;
          };

  lambdaApiGatewayInvoke:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt LambdaFunction.Arn
      Principal: apigateway.amazonaws.com
      SourceArn: !Join [
          "", [
            "arn:aws:execute-api:",
            { "Ref": "AWS::Region" }, ":",
            { "Ref": "AWS::AccountId" }, ":",
            !Ref ApiGatewayRestApi, "/*/*"
        ]
      ]

  ApiGatewayRestApi:
    Type: "AWS::ApiGateway::RestApi"
    Properties:
      Name: !Ref LambdaFunction
      ApiKeySourceType: "HEADER"
      EndpointConfiguration:
        Types:
          - "REGIONAL"

  ApiGatewayResource:
    Type: 'AWS::ApiGateway::Resource'
    DependsOn: ApiGatewayRestApi
    Properties:
      RestApiId: !Ref ApiGatewayRestApi
      ParentId: !GetAtt
        - ApiGatewayRestApi
        - RootResourceId
      PathPart: contact-us

  ApiGatewayMethod2:
    Type: "AWS::ApiGateway::Method"
    DependsOn: ApiGatewayResource
    Properties:
      RestApiId: !Ref ApiGatewayRestApi
      ResourceId: !Ref ApiGatewayResource
      HttpMethod: "POST"
      AuthorizationType: "NONE"
      ApiKeyRequired: false
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS
        Uri: !Sub
          - arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${lambdaArn}/invocations
          - lambdaArn: !GetAtt LambdaFunction.Arn
        IntegrationResponses:
          - StatusCode: "200"
      MethodResponses:
        - ResponseModels:
            "application/json": "Empty"
          ResponseParameters:
            "method.response.header.Access-Control-Allow-Headers": false
            "method.response.header.Access-Control-Allow-Methods": false
            "method.response.header.Access-Control-Allow-Origin": false
          StatusCode: "200"

  ApiGatewayMethod:
    Type: "AWS::ApiGateway::Method"
    DependsOn: ApiGatewayMethod2
    Properties:
      RestApiId: !Ref ApiGatewayRestApi
      ResourceId: !Ref ApiGatewayResource
      HttpMethod: "OPTIONS"
      AuthorizationType: "NONE"
      ApiKeyRequired: false
      RequestParameters: { }
      MethodResponses:
        - ResponseModels:
            "application/json": "Empty"
          ResponseParameters:
            "method.response.header.Access-Control-Allow-Headers": false
            "method.response.header.Access-Control-Allow-Methods": false
            "method.response.header.Access-Control-Allow-Origin": false
          StatusCode: "200"
      Integration:
        CacheNamespace: !Ref ApiGatewayResource
        IntegrationResponses:
          - ResponseParameters:
              "method.response.header.Access-Control-Allow-Headers": "'*'"
              "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'"
              "method.response.header.Access-Control-Allow-Origin": "'*'"
            ResponseTemplates: { }
            SelectionPattern: ""
            StatusCode: "200"
        PassthroughBehavior: "WHEN_NO_MATCH"
        RequestTemplates:
          "application/json": "{\"statusCode\": 200}"
        TimeoutInMillis: 29000
        Type: "MOCK"

  ApiGatewayDeployment:
    Type: "AWS::ApiGateway::Deployment"
    DependsOn: ApiGatewayMethod
    Properties:
      RestApiId: !Ref ApiGatewayRestApi

  ApiGatewayStage:
    Type: "AWS::ApiGateway::Stage"
    DependsOn: ApiGatewayDeployment
    Properties:
      StageName: "v1"
      DeploymentId: !Ref ApiGatewayDeployment
      RestApiId: !Ref ApiGatewayRestApi

Outputs:
  APIGatewayURL:
    Value: !Sub 'https://${ApiGatewayRestApi}.execute-api.${AWS::Region}.amazonaws.com/${ApiGatewayStage}/contact-us'
    Description: URL of the REST API.

  LambdaName:
    Value: !Ref LambdaFunction
    Description: Name of the Lambda function.

#  TemplateName:
#    Value: !Ref SesTemplate
#    Description: Name of the SES template.